using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace UpdatePackageAnalyzer
{
  using Sitecore.Common;
  using Sitecore.Diagnostics;
  using Sitecore.Install.BlobData;
  using Sitecore.Install.Files;
  using Sitecore.Install.Framework;
  using Sitecore.Install.Items;
  using Sitecore.Install.Zip;
  using Sitecore.Update;
  using System.IO;

  using Sitecore.Update.Commands;
  using Sitecore.Update.Configuration;
  using Sitecore.Update.Data;
  using Sitecore.Update.Installer;
  using Sitecore.Update.Installer.Items;
  using Sitecore.Update.Installer.Utils;
  using Sitecore.Update.Interfaces;
  using Sitecore.Update.Metadata;

  public class DiffLoader
  {
    public DiffInfo Load(string path)
    {
      Assert.IsNotNullOrEmpty(path, "path");

      if (File.Exists(path))
      {
        return LoadFromPackage(path);
      }

      if (Directory.Exists(path))
      {
        return this.LoadFromDiff(path);
      }

      throw new Exception("Neither package nor Diff found. Please specify the correct path.");
    }

    protected virtual DiffInfo LoadFromPackage(string path)
    {
      IProcessingContext context = new SimpleProcessingContext();
      CommandInstallerContext.Setup(context, Path.GetFileNameWithoutExtension(path), UpgradeAction.Preview, Sitecore.Update.Utils.InstallMode.Install, null, new List<ContingencyEntry>());
      ISource<PackageEntry> source = new PackageReader(path);
      ISink<PackageEntry> installer = DoCreateInstallerSink(context);
      var sorter = new PackageDumper(source);
      sorter.Initialize(context);
      sorter.Populate(installer);
      installer.Flush();
      var commands = new List<ICommand>(sorter.Commands);
      var engine = new DataEngine { FilterCommands = false, OptimizeCommands = false };
      engine.ProcessCommands(ref commands);

      var info = new DiffInfo(commands, string.Empty, string.Empty, "Generated by ConvertFromPackage command.");
      MetadataView view = UpdateHelper.LoadMetadata(path);
      if (view != null)
      {
        info.Readme = view.Readme;
        info.InstallMode = view.Comment;
        info.Title = view.PackageName;
      };

      return info;
    }

    protected virtual ISink<PackageEntry> DoCreateInstallerSink(IProcessingContext context)
    {
      var dispatcher = new MySinkDispatcher(context);
      dispatcher.AddSink(Sitecore.Install.Constants.MetadataPrefix, new Sitecore.Install.Metadata.MetadataSink(context));
      dispatcher.AddSink(Sitecore.Install.Constants.BlobDataPrefix, new BlobInstaller(context));
      dispatcher.AddSink(Sitecore.Install.Constants.ItemsPrefix, new LegacyItemUnpacker(new ItemInstaller(context)));
      dispatcher.AddSink(Sitecore.Install.Constants.FilesPrefix, new FileInstaller(context));

      dispatcher.Initialize(context);
      foreach (ICommand command in Factory.Instance.GetSupportedCommands().Values)
      {
        ISink<PackageEntry> sink = SinkItemFactory.GetInstallerSink(command.CommandPrefix, UpgradeAction.Preview, context);
        if (sink != null)
        {
          dispatcher.AddSink(command.CommandPrefix, sink);
        }
      }

      return dispatcher;
    }

    protected virtual DiffInfo LoadFromDiff(string path)
    {
      return DiffInfo.LoadDiff(path);
    }

  }
}
